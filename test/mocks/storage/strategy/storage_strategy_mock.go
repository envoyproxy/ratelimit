// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/storage/strategy/storage_strategy.go

// Package mock_strategy is a generated GoMock package.
package mock_strategy

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorageStrategy is a mock of StorageStrategy interface
type MockStorageStrategy struct {
	ctrl     *gomock.Controller
	recorder *MockStorageStrategyMockRecorder
}

// MockStorageStrategyMockRecorder is the mock recorder for MockStorageStrategy
type MockStorageStrategyMockRecorder struct {
	mock *MockStorageStrategy
}

// NewMockStorageStrategy creates a new mock instance
func NewMockStorageStrategy(ctrl *gomock.Controller) *MockStorageStrategy {
	mock := &MockStorageStrategy{ctrl: ctrl}
	mock.recorder = &MockStorageStrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageStrategy) EXPECT() *MockStorageStrategyMockRecorder {
	return m.recorder
}

// GetValue mocks base method
func (m *MockStorageStrategy) GetValue(key string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", key)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue
func (mr *MockStorageStrategyMockRecorder) GetValue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockStorageStrategy)(nil).GetValue), key)
}

// SetValue mocks base method
func (m *MockStorageStrategy) SetValue(key string, value, expirationSeconds uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetValue", key, value, expirationSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetValue indicates an expected call of SetValue
func (mr *MockStorageStrategyMockRecorder) SetValue(key, value, expirationSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetValue", reflect.TypeOf((*MockStorageStrategy)(nil).SetValue), key, value, expirationSeconds)
}

// IncrementValue mocks base method
func (m *MockStorageStrategy) IncrementValue(key string, delta uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementValue", key, delta)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementValue indicates an expected call of IncrementValue
func (mr *MockStorageStrategyMockRecorder) IncrementValue(key, delta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementValue", reflect.TypeOf((*MockStorageStrategy)(nil).IncrementValue), key, delta)
}

// SetExpire mocks base method
func (m *MockStorageStrategy) SetExpire(key string, expirationSeconds uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExpire", key, expirationSeconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetExpire indicates an expected call of SetExpire
func (mr *MockStorageStrategyMockRecorder) SetExpire(key, expirationSeconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExpire", reflect.TypeOf((*MockStorageStrategy)(nil).SetExpire), key, expirationSeconds)
}
