// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/storage/service/memcached_client.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	memcache "github.com/bradfitz/gomemcache/memcache"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMemcachedClientInterface is a mock of MemcachedClientInterface interface
type MockMemcachedClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMemcachedClientInterfaceMockRecorder
}

// MockMemcachedClientInterfaceMockRecorder is the mock recorder for MockMemcachedClientInterface
type MockMemcachedClientInterfaceMockRecorder struct {
	mock *MockMemcachedClientInterface
}

// NewMockMemcachedClientInterface creates a new mock instance
func NewMockMemcachedClientInterface(ctrl *gomock.Controller) *MockMemcachedClientInterface {
	mock := &MockMemcachedClientInterface{ctrl: ctrl}
	mock.recorder = &MockMemcachedClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMemcachedClientInterface) EXPECT() *MockMemcachedClientInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockMemcachedClientInterface) Get(key string) (*memcache.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*memcache.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMemcachedClientInterfaceMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMemcachedClientInterface)(nil).Get), key)
}

// Set mocks base method
func (m *MockMemcachedClientInterface) Set(item *memcache.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockMemcachedClientInterfaceMockRecorder) Set(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMemcachedClientInterface)(nil).Set), item)
}

// Increment mocks base method
func (m *MockMemcachedClientInterface) Increment(key string, delta uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", key, delta)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment
func (mr *MockMemcachedClientInterfaceMockRecorder) Increment(key, delta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockMemcachedClientInterface)(nil).Increment), key, delta)
}
