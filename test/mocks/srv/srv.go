// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/envoyproxy/ratelimit/src/srv (interfaces: SrvResolver)

// Package mock_srv is a generated GoMock package.
package mock_srv

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSrvResolver is a mock of SrvResolver interface
type MockSrvResolver struct {
	ctrl     *gomock.Controller
	recorder *MockSrvResolverMockRecorder
}

// MockSrvResolverMockRecorder is the mock recorder for MockSrvResolver
type MockSrvResolverMockRecorder struct {
	mock *MockSrvResolver
}

// NewMockSrvResolver creates a new mock instance
func NewMockSrvResolver(ctrl *gomock.Controller) *MockSrvResolver {
	mock := &MockSrvResolver{ctrl: ctrl}
	mock.recorder = &MockSrvResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSrvResolver) EXPECT() *MockSrvResolverMockRecorder {
	return m.recorder
}

// ServerStringsFromSrv mocks base method
func (m *MockSrvResolver) ServerStringsFromSrv(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerStringsFromSrv", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerStringsFromSrv indicates an expected call of ServerStringsFromSrv
func (mr *MockSrvResolverMockRecorder) ServerStringsFromSrv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerStringsFromSrv", reflect.TypeOf((*MockSrvResolver)(nil).ServerStringsFromSrv), arg0)
}
