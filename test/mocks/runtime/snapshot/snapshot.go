// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/lyft/goruntime/snapshot (interfaces: IFace)

package mock_snapshot

import (
	gomock "github.com/golang/mock/gomock"
	entry "github.com/websdev/goruntime/snapshot/entry"
)

// Mock of IFace interface
type MockIFace struct {
	ctrl     *gomock.Controller
	recorder *_MockIFaceRecorder
}

// Recorder for MockIFace (not exported)
type _MockIFaceRecorder struct {
	mock *MockIFace
}

func NewMockIFace(ctrl *gomock.Controller) *MockIFace {
	mock := &MockIFace{ctrl: ctrl}
	mock.recorder = &_MockIFaceRecorder{mock}
	return mock
}

func (_m *MockIFace) EXPECT() *_MockIFaceRecorder {
	return _m.recorder
}

func (_m *MockIFace) Entries() map[string]*entry.Entry {
	ret := _m.ctrl.Call(_m, "Entries")
	ret0, _ := ret[0].(map[string]*entry.Entry)
	return ret0
}

func (_mr *_MockIFaceRecorder) Entries() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Entries")
}

func (_m *MockIFace) FeatureEnabled(_param0 string, _param1 uint64) bool {
	ret := _m.ctrl.Call(_m, "FeatureEnabled", _param0, _param1)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockIFaceRecorder) FeatureEnabled(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FeatureEnabled", arg0, arg1)
}

func (_m *MockIFace) Get(_param0 string) string {
	ret := _m.ctrl.Call(_m, "Get", _param0)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockIFaceRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockIFace) GetInteger(_param0 string, _param1 uint64) uint64 {
	ret := _m.ctrl.Call(_m, "GetInteger", _param0, _param1)
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockIFaceRecorder) GetInteger(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInteger", arg0, arg1)
}

func (_m *MockIFace) Keys() []string {
	ret := _m.ctrl.Call(_m, "Keys")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockIFaceRecorder) Keys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Keys")
}

func (_m *MockIFace) SetEntry(_param0 string, _param1 *entry.Entry) {
	_m.ctrl.Call(_m, "SetEntry", _param0, _param1)
}

func (_mr *_MockIFaceRecorder) SetEntry(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEntry", arg0, arg1)
}
