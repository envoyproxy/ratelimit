// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/envoyproxy/ratelimit/src/config (interfaces: RateLimitConfig,RateLimitConfigLoader)

// Package mock_config is a generated GoMock package.
package mock_config

import (
	context "context"
	reflect "reflect"

	envoy_extensions_common_ratelimit_v3 "github.com/envoyproxy/go-control-plane/envoy/extensions/common/ratelimit/v3"
	gomock "github.com/golang/mock/gomock"

	config "github.com/envoyproxy/ratelimit/src/config"
	stats "github.com/envoyproxy/ratelimit/src/stats"
)

// MockRateLimitConfig is a mock of RateLimitConfig interface
type MockRateLimitConfig struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitConfigMockRecorder
}

// MockRateLimitConfigMockRecorder is the mock recorder for MockRateLimitConfig
type MockRateLimitConfigMockRecorder struct {
	mock *MockRateLimitConfig
}

// NewMockRateLimitConfig creates a new mock instance
func NewMockRateLimitConfig(ctrl *gomock.Controller) *MockRateLimitConfig {
	mock := &MockRateLimitConfig{ctrl: ctrl}
	mock.recorder = &MockRateLimitConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitConfig) EXPECT() *MockRateLimitConfigMockRecorder {
	return m.recorder
}

// Dump mocks base method
func (m *MockRateLimitConfig) Dump() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dump")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dump indicates an expected call of Dump
func (mr *MockRateLimitConfigMockRecorder) Dump() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dump", reflect.TypeOf((*MockRateLimitConfig)(nil).Dump))
}

// GetLimit mocks base method
func (m *MockRateLimitConfig) GetLimit(arg0 context.Context, arg1 string, arg2 *envoy_extensions_common_ratelimit_v3.RateLimitDescriptor) *config.RateLimit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*config.RateLimit)
	return ret0
}

// GetLimit indicates an expected call of GetLimit
func (mr *MockRateLimitConfigMockRecorder) GetLimit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimit", reflect.TypeOf((*MockRateLimitConfig)(nil).GetLimit), arg0, arg1, arg2)
}

// MockRateLimitConfigLoader is a mock of RateLimitConfigLoader interface
type MockRateLimitConfigLoader struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitConfigLoaderMockRecorder
}

// MockRateLimitConfigLoaderMockRecorder is the mock recorder for MockRateLimitConfigLoader
type MockRateLimitConfigLoaderMockRecorder struct {
	mock *MockRateLimitConfigLoader
}

// NewMockRateLimitConfigLoader creates a new mock instance
func NewMockRateLimitConfigLoader(ctrl *gomock.Controller) *MockRateLimitConfigLoader {
	mock := &MockRateLimitConfigLoader{ctrl: ctrl}
	mock.recorder = &MockRateLimitConfigLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitConfigLoader) EXPECT() *MockRateLimitConfigLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockRateLimitConfigLoader) Load(arg0 []config.RateLimitConfigToLoad, arg1 stats.Manager, arg2 bool) config.RateLimitConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0, arg1, arg2)
	ret0, _ := ret[0].(config.RateLimitConfig)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockRateLimitConfigLoaderMockRecorder) Load(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockRateLimitConfigLoader)(nil).Load), arg0, arg1, arg2)
}

// MockRateLimitConfigProvider is a mock of RateLimitConfigProvider interface
type MockRateLimitConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitConfigProviderMockRecorder
}

// MockRateLimitConfigProviderMockRecorder is the mock recorder for MockRateLimitConfigProvider
type MockRateLimitConfigProviderMockRecorder struct {
	mock *MockRateLimitConfigProvider
}

// NewMockRateLimitConfigProvider creates a new mock instance
func NewMockRateLimitConfigProvider(ctrl *gomock.Controller) *MockRateLimitConfigProvider {
	mock := &MockRateLimitConfigProvider{ctrl: ctrl}
	mock.recorder = &MockRateLimitConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitConfigProvider) EXPECT() *MockRateLimitConfigProviderMockRecorder {
	return m.recorder
}

// ConfigUpdateEvent mocks base method
func (m *MockRateLimitConfigProvider) ConfigUpdateEvent() <-chan config.ConfigUpdateEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigUpdateEvent")
	ret0, _ := ret[0].(<-chan config.ConfigUpdateEvent)
	return ret0
}

// ConfigUpdateEvent indicates an expected call of ConfigUpdateEvent
func (mr *MockRateLimitConfigProviderMockRecorder) ConfigUpdateEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigUpdateEvent", reflect.TypeOf((*MockRateLimitConfigProvider)(nil).ConfigUpdateEvent))
}

// MockConfigUpdateEvent is a mock of ConfigUpdateEvent interface
type MockConfigUpdateEvent struct {
	ctrl     *gomock.Controller
	recorder *MockConfigUpdateEventMockRecorder
}

// MockConfigUpdateEventMockRecorder is the mock recorder for MockConfigUpdateEvent
type MockConfigUpdateEventMockRecorder struct {
	mock *MockConfigUpdateEvent
}

// NewMockConfigUpdateEvent creates a new mock instance
func NewMockConfigUpdateEvent(ctrl *gomock.Controller) *MockConfigUpdateEvent {
	mock := &MockConfigUpdateEvent{ctrl: ctrl}
	mock.recorder = &MockConfigUpdateEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigUpdateEvent) EXPECT() *MockConfigUpdateEventMockRecorder {
	return m.recorder
}

// GetConfig mocks base method
func (m *MockConfigUpdateEvent) GetConfig() (config.RateLimitConfig, any) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(config.RateLimitConfig)
	ret1, _ := ret[1].(any)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockConfigUpdateEventMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigUpdateEvent)(nil).GetConfig))
}
