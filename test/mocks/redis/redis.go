// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/envoyproxy/ratelimit/src/redis (interfaces: Client)

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	redis "github.com/envoyproxy/ratelimit/src/redis"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// DoCmd mocks base method
func (m *MockClient) DoCmd(arg0 interface{}, arg1, arg2 string, arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DoCmd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoCmd indicates an expected call of DoCmd
func (mr *MockClientMockRecorder) DoCmd(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoCmd", reflect.TypeOf((*MockClient)(nil).DoCmd), varargs...)
}

// ImplicitPipeliningEnabled mocks base method
func (m *MockClient) ImplicitPipeliningEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImplicitPipeliningEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ImplicitPipeliningEnabled indicates an expected call of ImplicitPipeliningEnabled
func (mr *MockClientMockRecorder) ImplicitPipeliningEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImplicitPipeliningEnabled", reflect.TypeOf((*MockClient)(nil).ImplicitPipeliningEnabled))
}

// NumActiveConns mocks base method
func (m *MockClient) NumActiveConns() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumActiveConns")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumActiveConns indicates an expected call of NumActiveConns
func (mr *MockClientMockRecorder) NumActiveConns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumActiveConns", reflect.TypeOf((*MockClient)(nil).NumActiveConns))
}

// PipeAppend mocks base method
func (m *MockClient) PipeAppend(arg0 redis.Pipeline, arg1 interface{}, arg2, arg3 string, arg4 ...interface{}) redis.Pipeline {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PipeAppend", varargs...)
	ret0, _ := ret[0].(redis.Pipeline)
	return ret0
}

// PipeAppend indicates an expected call of PipeAppend
func (mr *MockClientMockRecorder) PipeAppend(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipeAppend", reflect.TypeOf((*MockClient)(nil).PipeAppend), varargs...)
}

// PipeDo mocks base method
func (m *MockClient) PipeDo(arg0 redis.Pipeline) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PipeDo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PipeDo indicates an expected call of PipeDo
func (mr *MockClientMockRecorder) PipeDo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipeDo", reflect.TypeOf((*MockClient)(nil).PipeDo), arg0)
}
