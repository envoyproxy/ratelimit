// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/envoyproxy/go-control-plane/envoy/service/ratelimit/v2 (interfaces: RateLimitServiceServer)

// Package mock_v2 is a generated GoMock package.
package mock_v2

import (
	context "context"
	v2 "github.com/envoyproxy/go-control-plane/envoy/service/ratelimit/v2"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRateLimitServiceServer is a mock of RateLimitServiceServer interface
type MockRateLimitServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitServiceServerMockRecorder
}

// MockRateLimitServiceServerMockRecorder is the mock recorder for MockRateLimitServiceServer
type MockRateLimitServiceServerMockRecorder struct {
	mock *MockRateLimitServiceServer
}

// NewMockRateLimitServiceServer creates a new mock instance
func NewMockRateLimitServiceServer(ctrl *gomock.Controller) *MockRateLimitServiceServer {
	mock := &MockRateLimitServiceServer{ctrl: ctrl}
	mock.recorder = &MockRateLimitServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitServiceServer) EXPECT() *MockRateLimitServiceServerMockRecorder {
	return m.recorder
}

// ShouldRateLimit mocks base method
func (m *MockRateLimitServiceServer) ShouldRateLimit(arg0 context.Context, arg1 *v2.RateLimitRequest) (*v2.RateLimitResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldRateLimit", arg0, arg1)
	ret0, _ := ret[0].(*v2.RateLimitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShouldRateLimit indicates an expected call of ShouldRateLimit
func (mr *MockRateLimitServiceServerMockRecorder) ShouldRateLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldRateLimit", reflect.TypeOf((*MockRateLimitServiceServer)(nil).ShouldRateLimit), arg0, arg1)
}
